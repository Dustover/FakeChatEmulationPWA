// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
    currentUserId: 2, // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ë–æ—Ä–∏—Å)
    storageKey: 'fakeChatData',
    themes: ['telegram', 'whatsapp', 'imessage']
};


// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    currentChatId: 1,
    chats: [
        {
            id: 1,
            name: "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç",
            participants: [
                { id: 1, name: "–ê–Ω–Ω–∞", status: "online", avatar: null },
                { id: 2, name: "–ë–æ—Ä–∏—Å", status: "–±—ã–ª 5 –º–∏–Ω –Ω–∞–∑–∞–¥", avatar: null, isCurrentUser: true }
            ],
            messages: [
                { id: 1, senderId: 1, text: "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤—ã –∫ —Å—ä—ë–º–∫–∞–º?", timestamp: formatDateTimeHuman(new Date(Date.now() - 30 * 60000)), status: "read" },
                { id: 2, senderId: 2, text: "–î–∞, —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ! –ì–¥–µ —Ä–µ–∫–≤–∏–∑–∏—Ç?", timestamp: formatDateTimeHuman(new Date(Date.now() - 25 * 60000)), status: "read" },
                { id: 3, senderId: 1, text: "–í –≥—Ä–∏–º—ë—Ä–∫–µ, –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª. –ú–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —á—Ç–æ –Ω—É–∂–Ω–æ üòä", timestamp: formatDateTimeHuman(new Date(Date.now() - 20 * 60000)), status: "read" }
            ],
            appearance: {
                theme: "telegram",
                showTimestamps: true,
                showStatus: true
            }
        },
        {
            id: 2,
            name: "–ê–Ω–Ω–∞ –∏ –ë–æ—Ä–∏—Å",
            participants: [
                { id: 1, name: "–ê–Ω–Ω–∞", status: "online", avatar: null },
                { id: 2, name: "–ë–æ—Ä–∏—Å", status: "–±—ã–ª 5 –º–∏–Ω –Ω–∞–∑–∞–¥", avatar: null, isCurrentUser: true }
            ],
            messages: [
                { id: 1, senderId: 1, text: "–ì–¥–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è?", timestamp: formatDateTimeHuman(new Date(Date.now() - 45 * 60000)), status: "read" }
            ],
            appearance: {
                theme: "telegram",
                showTimestamps: true,
                showStatus: true
            }
        }
    ],
    isAdminPanelOpen: false,
    activeAdminTab: "participants",
    typingUser: null
};


// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
function getCurrentChat() {
    return state.chats.find(chat => chat.id === state.currentChatId);
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
function getParticipantById(participantId) {
    const chat = getCurrentChat();
    return chat.participants.find(p => p.id === participantId);
}


// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–î–î.–ú–ú.–ì–ì–ì–ì –≤ –ß–ß:–ú–ú"
function formatTime(timestamp) {
    // –ï—Å–ª–∏ timestamp —É–∂–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç "–î–î.–ú–ú.–ì–ì–ì–ì –≤ –ß–ß:–ú–ú"
    if (typeof timestamp === 'string' && timestamp.includes('–≤ ')) {
        return timestamp.split('–≤ ')[1]; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ß–ß:–ú–ú"
    }
    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π fallback
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}


// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–î–î.–ú–ú.–ì–ì–ì–ì –≤ –ß–ß:–ú–ú"
function formatDate(timestamp) {
    if (typeof timestamp === 'string' && timestamp.includes('–≤ ')) {
        return timestamp.split('–≤ ')[0].trim(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–î–î.–ú–ú.–ì–ì–ì–ì"
    }
    // fallback
    const date = new Date(timestamp);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
        return "–°–µ–≥–æ–¥–Ω—è";
    } else if (date.toDateString() === yesterday.toDateString()) {
        return "–í—á–µ—Ä–∞";
    } else {
        return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' });
    }
}


// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º
function groupMessagesByDate(messages) {
    const grouped = {};

    messages.forEach(message => {
        // –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ "–î–î.–ú–ú.–ì–ì–ì–ì"
        const dateKey = (typeof message.timestamp === 'string' && message.timestamp.includes('–≤ '))
            ? message.timestamp.split('–≤ ')[0].trim()
            : new Date(message.timestamp).toDateString();

        if (!grouped[dateKey]) {
            grouped[dateKey] = [];
        }

        grouped[dateKey].push(message);
    });

    return grouped;
}


// –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function closeAdminPanel() {
    const adminPanel = document.getElementById('admin-panel');
    adminPanel.classList.remove('visible');
    setTimeout(() => {
        adminPanel.classList.add('hidden');
        state.isAdminPanelOpen = false;
    }, 300);
}


// –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function openAdminPanel() {
    const adminPanel = document.getElementById('admin-panel');
    adminPanel.classList.remove('hidden');
    setTimeout(() => {
        adminPanel.classList.add('visible');
        state.isAdminPanelOpen = true;
    }, 10);
    populateAdminPanel();
}


// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function switchAdminTab(tabId) {
    state.activeAdminTab = tabId;

    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.add('hidden');
    });

    // –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const activeTab = document.getElementById(`${tabId}-tab`);
    if (activeTab) activeTab.classList.remove('hidden');

    // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    const activeBtn = document.querySelector(`.tab[data-tab="${tabId}"]`);
    if (activeBtn) activeBtn.classList.add('active');
}


// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º isCurrentUser
function loadData() {
    try {
        const savedData = localStorage.getItem(CONFIG.storageKey);
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            state.chats = parsedData.chats || state.chats;
            state.currentChatId = parsedData.currentChatId || state.currentChatId;

            const chat = state.chats.find(chat => chat.id === state.currentChatId);
            if (chat) {
                chat.participants.forEach(p => {
                    p.isCurrentUser = (p.id === CONFIG.currentUserId);
                });
            }
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}


// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    try {
        const dataToSave = {
            chats: state.chats,
            currentChatId: state.currentChatId
        };
        localStorage.setItem(CONFIG.storageKey, JSON.stringify(dataToSave));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}


// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
function renderChatList() {
    const chatList = document.getElementById('chat-list');
    chatList.innerHTML = '';

    state.chats.forEach(chat => {
        const lastMessage = chat.messages.length > 0
            ? chat.messages[chat.messages.length - 1].text
            : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';

        const isActive = chat.id === state.currentChatId;

        const chatItem = document.createElement('div');
        chatItem.className = `chat-item ${isActive ? 'active' : ''}`;
        chatItem.dataset.chatId = chat.id;
        chatItem.innerHTML = `
            <div class="avatar-placeholder"></div>
            <div class="chat-info">
                <div class="chat-name">${chat.name}</div>
                <div class="last-message">${lastMessage}</div>
            </div>
        `;

        chatItem.addEventListener('click', () => switchChat(chat.id));
        chatList.appendChild(chatItem);
    });
}


// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
function switchChat(chatId) {
    state.currentChatId = chatId;
    saveData();
    renderChatList();
    renderMessages();
    updateChatHeader();
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–ø–∫–∏ —á–∞—Ç–∞
function updateChatHeader() {
    const chat = getCurrentChat();
    document.getElementById('chat-name').textContent = chat.name;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
    const otherParticipant = chat.participants.find(p => !p.isCurrentUser);
    if (otherParticipant) {
        document.getElementById('chat-status').textContent = otherParticipant.status;
    }
}


// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function renderMessages() {
    const messagesContainer = document.getElementById('messages');
    messagesContainer.innerHTML = '';

    const chat = getCurrentChat();
    const groupedMessages = groupMessagesByDate(chat.messages);

    const showTimestamps = chat.appearance.showTimestamps;
    if (!showTimestamps) {
        messagesContainer.classList.add('no-timestamps');
    } else {
        messagesContainer.classList.remove('no-timestamps');
    }

    Object.keys(groupedMessages).forEach(date => {
        const dateHeader = document.createElement('div');
        dateHeader.className = 'message-date';
        dateHeader.textContent = date; // —É–∂–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        messagesContainer.appendChild(dateHeader);

        groupedMessages[date].forEach(message => {
            const sender = getParticipantById(message.senderId);
            const isCurrentUser = sender.isCurrentUser;

            const messageEl = document.createElement('div');
            messageEl.className = `message ${isCurrentUser ? 'outgoing' : 'incoming'}`;
            messageEl.dataset.messageId = message.id;

            messageEl.innerHTML = `
                <div class="bubble">${escapeHtml(message.text)}</div>
                <div class="meta">
                    <span class="time">${formatTime(message.timestamp)}</span>
                    <span class="status">${isCurrentUser ? '‚úì‚úì' : ''}</span>
                </div>
            `;

            messageEl.addEventListener('dblclick', e => {
                e.stopPropagation();
                openEditMessage(message.id);
            });

            let lastTap = 0;
            messageEl.addEventListener('touchend', event => {
                const currentTime = Date.now();
                const tapLength = currentTime - lastTap;
                if (tapLength > 0 && tapLength < 300) {
                    event.preventDefault();
                    openEditMessage(message.id);
                }
                lastTap = currentTime;
            });

            messagesContainer.appendChild(messageEl);
        });
    });

    scrollToBottom();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
function openEditMessage(messageId) {
    const chat = getCurrentChat();
    const message = chat.messages.find(m => m.id === messageId);
    if (!message) return;

    const messagesContainer = document.getElementById('messages');
    const messageEl = messagesContainer.querySelector(`.message[data-message-id="${messageId}"]`);
    if (!messageEl) return;

    const bubble = messageEl.querySelector('.bubble');
    if (!bubble) return;

    // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç ‚Äî –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if (bubble.querySelector('textarea')) return;

    const originalText = message.text;

    bubble.innerHTML = `
        <textarea class="edit-textarea" rows="3">${escapeHtml(originalText)}</textarea>
        <div class="edit-controls" style="margin-top: 4px;">
            <button class="save-edit-btn" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">üíæ</button>
            <button class="cancel-edit-btn" title="–û—Ç–º–µ–Ω–∞">‚ùå</button>
        </div>
    `;

    const textarea = bubble.querySelector('textarea');
    textarea.focus();
    textarea.setSelectionRange(originalText.length, originalText.length);

    const cancelEdit = () => {
        bubble.textContent = originalText;
    };

    const saveEdit = () => {
        const newText = textarea.value.trim();
        if (newText === '') {
            alert('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
            return;
        }

        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è currentEditingMessageId, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ –º–æ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const chat = getCurrentChat();
        const messageIndex = chat.messages.findIndex(msg => msg.id === currentEditingMessageId);

        if (messageIndex !== -1) {
            chat.messages[messageIndex].text = newText;
            saveData();
            renderMessages();
            closeEditModal();
        } else {
            console.warn('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    };

    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–º–µ–Ω–∞
    bubble.querySelector('.cancel-edit-btn').addEventListener('click', cancelEdit);
    bubble.querySelector('.save-edit-btn').addEventListener('click', saveEdit);
}

// –ü—Ä–æ—Å—Ç–∞—è —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function escapeHtml(str) {
    return str.replace(/[&<>"']/g, function(m) {
        switch (m) {
            case '&': return '&amp;';
            case '<': return '&lt;';
            case '>': return '&gt;';
            case '"': return '&quot;';
            case "'": return '&#39;';
            default: return m;
        }
    });
}

// –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ toISOString()
function formatDateTimeHuman(date) {
    const d = date instanceof Date ? date : new Date(date);
    const day = d.getDate().toString().padStart(2, '0');
    const month = (d.getMonth() + 1).toString().padStart(2, '0');
    const year = d.getFullYear();
    const hours = d.getHours().toString().padStart(2, '0');
    const minutes = d.getMinutes().toString().padStart(2, '0');
    return `${day}.${month}.${year} –≤ ${hours}:${minutes}`;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
function addMessage(senderId, text) {
    const chat = getCurrentChat();
    if (!chat) {
        console.error('–¢–µ–∫—É—â–∏–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const newMessage = {
        id: Date.now(),
        senderId,
        text,
        timestamp: formatDateTimeHuman(new Date()),
        status: "sent"
    };

    chat.messages.push(newMessage);
    saveData();
    renderMessages();

    const otherParticipant = chat.participants.find(p => p.id !== senderId);
    if (otherParticipant) {
        showTypingIndicator(otherParticipant.name);
        setTimeout(hideTypingIndicator, 2000);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (—Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å—Ç—Ä–æ–∫–æ–π "–î–î.–ú–ú.–ì–ì–ì–ì –≤ –ß–ß:–ú–ú")
function addMessageWithCustomTime(senderId, text, timestamp) {
    const chat = getCurrentChat();
    if (!chat) {
        console.error('–¢–µ–∫—É—â–∏–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const newMessage = {
        id: Date.now(),
        senderId,
        text,
        timestamp, // –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        status: "sent"
    };

    chat.messages.push(newMessage);
    saveData();
    renderMessages();

    const otherParticipant = chat.participants.find(p => p.id !== senderId);
    if (otherParticipant) {
        showTypingIndicator(otherParticipant.name);
        setTimeout(hideTypingIndicator, 2000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
// baseDate –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è, –∏–Ω–∞—á–µ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—Å—Ç null –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
function getMessageTimestamp(selectedValue, customTimeValue, baseDate) {
    if (!(baseDate instanceof Date) || isNaN(baseDate)) {
        console.warn('–ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç Date –∫–∞–∫ baseDate');
        return null;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ "–î–î.–ú–ú.–ì–ì–ì–ì –≤ –ß–ß:–ú–ú"
    function formatDateTime(date) {
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        return `${day}.${month}.${year} –≤ ${hours}:${minutes}`;
    }

    let dt;

    if (selectedValue === 'now') {
        dt = baseDate;
    } else if (selectedValue === '5min') {
        dt = new Date(baseDate.getTime() + 5 * 60000);
    } else if (selectedValue === '1h') {
        dt = new Date(baseDate.getTime() + 60 * 60000);
    } else if (selectedValue === 'custom') {
        if (customTimeValue) {
            const customDate = new Date(customTimeValue);
            if (!isNaN(customDate)) {
                dt = customDate;
            } else {
                console.warn('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', customTimeValue);
                dt = baseDate;
            }
        } else {
            dt = baseDate;
        }
    } else {
        dt = baseDate;
    }

    return formatDateTime(dt);
}


// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function sendMessageFromAdmin() {
    const senderSelect = document.getElementById('msg-sender');
    const textInput = document.getElementById('msg-text');
    const timeSelect = document.getElementById('msg-time');
    const customTimeInput = document.getElementById('custom-time');

    if (!senderSelect || !textInput) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    const senderId = parseInt(senderSelect.value, 10);
    const text = textInput.value.trim();

    if (isNaN(senderId)) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è');
        return;
    }

    if (!text) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }

    const selectedTime = timeSelect.value;
    const customTimeValue = customTimeInput && !customTimeInput.classList.contains('hidden')
        ? customTimeInput.value
        : null;

    // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è baseDate –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const baseDate = new Date(); // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π –¥–∞—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    const timestamp = getMessageTimestamp(selectedTime, customTimeValue, baseDate);

    addMessageWithCustomTime(senderId, text, timestamp);

    textInput.value = '';
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function addMessage(senderId, text) {
    const chat = getCurrentChat();
    if (!chat) {
        console.error('–¢–µ–∫—É—â–∏–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const newMessage = {
        id: Date.now(),
        senderId,
        text,
        timestamp: formatDateTimeHuman(new Date()),
        status: "sent"
    };

    chat.messages.push(newMessage);
    saveData();
    renderMessages();

    const otherParticipant = chat.participants.find(p => p.id !== senderId);
    if (otherParticipant) {
        showTypingIndicator(otherParticipant.name);
        setTimeout(hideTypingIndicator, 2000);
    }
}

function addMessageWithCustomTime(senderId, text, timestamp) {
    const chat = getCurrentChat();
    if (!chat) {
        console.error('–¢–µ–∫—É—â–∏–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const newMessage = {
        id: Date.now(),
        senderId,
        text,
        timestamp,
        status: "sent"
    };

    chat.messages.push(newMessage);
    saveData();
    renderMessages();

    const otherParticipant = chat.participants.find(p => p.id !== senderId);
    if (otherParticipant) {
        showTypingIndicator(otherParticipant.name);
        setTimeout(hideTypingIndicator, 2000);
    }
}


function sendMessageFromAdmin() {
    const senderSelect = document.getElementById('msg-sender');
    const textInput = document.getElementById('msg-text');
    const timeSelect = document.getElementById('msg-time');
    const customTimeInput = document.getElementById('custom-time');

    if (!senderSelect || !textInput) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    const senderId = parseInt(senderSelect.value, 10);
    const text = textInput.value.trim();

    if (isNaN(senderId)) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è');
        return;
    }

    if (!text) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }

    // –ù–æ–≤–∞—è —á–∞—Å—Ç—å: –≤—ã—á–∏—Å–ª—è–µ–º timestamp
    const selectedTime = timeSelect.value;
    const customTimeValue = customTimeInput && !customTimeInput.classList.contains('hidden')
    ? customTimeInput.value
    : null;
    const timestamp = getMessageTimestamp(selectedTime, customTimeValue);

    // –í–º–µ—Å—Ç–æ addMessage(senderId, text);
    addMessageWithCustomTime(senderId, text, timestamp);

    textInput.value = '';
}



// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
function addParticipant() {
    const name = prompt('–ò–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', '–£—á–∞—Å—Ç–Ω–∏–∫');
    if (!name) return;

    const chat = getCurrentChat();
    const newId = Math.max(...chat.participants.map(p => p.id), 0) + 1;

    chat.participants.push({
        id: newId,
        name,
        status: "online",
        avatar: null
    });

    saveData();
    populateAdminPanel();
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function populateAdminPanel() {
    const chat = getCurrentChat();

    // –£—á–∞—Å—Ç–Ω–∏–∫–∏
    const participantsContainer = document.getElementById('participants');
    participantsContainer.innerHTML = '';

    chat.participants.forEach(participant => {
        const participantEl = document.createElement('div');
        participantEl.className = 'participant';

        participantEl.innerHTML = `
            <div class="avatar-placeholder"></div>
            <div class="participant-info">
                <span class="name">${participant.name}</span>
                <span class="status">${participant.status}</span>
            </div>
            <button class="edit-btn">‚úèÔ∏è</button>
        `;

        participantsContainer.appendChild(participantEl);
    });

    // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const senderSelect = document.getElementById('msg-sender');
    senderSelect.innerHTML = '';

    chat.participants.forEach(participant => {
        const option = document.createElement('option');
        option.value = participant.id;
        option.textContent = participant.name;
        senderSelect.appendChild(option);
    });

    // –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    document.getElementById('chat-name-input').value = chat.name;

    // –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.theme-option').forEach(option => {
    option.addEventListener('click', () => {
        const selectedTheme = option.dataset.theme;

        // –ú–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
        changeTheme(selectedTheme);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ (–≥–∞–ª–æ—á–∫—É/–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å) —É –≤—Å–µ—Ö –æ–ø—Ü–∏–π
        document.querySelectorAll('.theme-option').forEach(opt => {
            opt.classList.toggle('active', opt.dataset.theme === selectedTheme);
        });
    });

        initDragAndDrop();
});

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    document.getElementById('show-timestamps').checked = chat.appearance.showTimestamps;
    document.getElementById('show-status').checked = chat.appearance.showStatus;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
function changeTheme(theme) {
    const chat = getCurrentChat();
    chat.appearance.theme = theme;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã —Ç–µ–º—ã
    document.getElementById('sidebar').className = theme + '-theme';
    document.getElementById('chat-container').className = theme + '-theme';

    saveData();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    const chat = getCurrentChat();
    chat.name = document.getElementById('chat-name-input').value;
    chat.appearance.showTimestamps = document.getElementById('show-timestamps').checked;
    chat.appearance.showStatus = document.getElementById('show-status').checked;

    saveData();
    updateChatHeader();
    renderChatList();
    renderMessages();  // ‚Üê –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤
}


// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
function clearChat() {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É?")) {
        const chat = getCurrentChat();
        chat.messages = [];
        saveData();
        renderMessages();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞
function exportChat() {
    const chat = getCurrentChat();
    const dataStr = JSON.stringify(chat, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);

    const exportFileDefaultName = `—á–∞—Ç_${chat.name}_${new Date().toISOString().slice(0, 10)}.json`;

    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
}

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
function showTypingIndicator(userName) {
    const indicator = document.getElementById('typing-indicator');
    document.getElementById('typing-user').textContent = userName;
    indicator.classList.remove('hidden');
    setTimeout(() => indicator.classList.add('visible'), 10);
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    indicator.classList.remove('visible');
    setTimeout(() => indicator.classList.add('hidden'), 300);
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
function scrollToBottom() {
    const messages = document.getElementById('messages');
    messages.scrollTo({
        top: messages.scrollHeight,
        behavior: 'smooth'
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
    document.getElementById('back-button').addEventListener('click', () => {
        document.getElementById('sidebar').classList.toggle('visible');
    });

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    document.getElementById('admin-toggle').addEventListener('click', openAdminPanel);
    document.getElementById('close-admin').addEventListener('click', closeAdminPanel);

    // –í–∫–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => {
            switchAdminTab(tab.dataset.tab);
        });
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    document.getElementById('send-msg').addEventListener('click', sendMessageFromAdmin);
    document.getElementById('send-btn').addEventListener('click', sendMessageFromUI);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    document.getElementById('message-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessageFromUI();
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
    document.getElementById('msg-text').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessageFromAdmin();
        }
    });

    // –£—á–∞—Å—Ç–Ω–∏–∫–∏
    document.getElementById('add-participant').addEventListener('click', addParticipant);

    // –í—ã–±–æ—Ä —Ç–µ–º—ã
    document.querySelectorAll('.theme-option').forEach(option => {
        option.addEventListener('click', () => {
            changeTheme(option.dataset.theme);
        });
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('save-settings').addEventListener('click', saveSettings);
    document.getElementById('clear-chat').addEventListener('click', clearChat);
    document.getElementById('export-chat').addEventListener('click', exportChat);

    // –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('msg-time').addEventListener('change', function() {
        document.getElementById('custom-time').classList.toggle('hidden', this.value !== 'custom');
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loadData();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupEventListeners();

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    renderChatList();
    renderMessages();
    populateAdminPanel();
    updateChatHeader();

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    switchAdminTab(state.activeAdminTab);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
    const chat = getCurrentChat();
    changeTheme(chat.appearance.theme);
}
// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('DOMContentLoaded', initApp)

// —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏

function formatDateTimeHuman(date) {
    const d = date instanceof Date ? date : new Date(date);
    const day = d.getDate().toString().padStart(2, '0');
    const month = (d.getMonth() + 1).toString().padStart(2, '0');
    const year = d.getFullYear();
    const hours = d.getHours().toString().padStart(2, '0');
    const minutes = d.getMinutes().toString().padStart(2, '0');
    return `${day}.${month}.${year} –≤ ${hours}:${minutes}`;
}
