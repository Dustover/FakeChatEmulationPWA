// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
    currentUserId: 2, // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ë–æ—Ä–∏—Å)
    storageKey: 'fakeChatData',
    themes: ['telegram', 'whatsapp', 'imessage']
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    currentChatId: 1,
    chats: [
        {
            id: 1,
            name: "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç",
            participants: [
                { id: 1, name: "–ê–Ω–Ω–∞", status: "online", avatar: null },
                { id: 2, name: "–ë–æ—Ä–∏—Å", status: "–±—ã–ª 5 –º–∏–Ω –Ω–∞–∑–∞–¥", avatar: null, isCurrentUser: true }
            ],
            messages: [
                { id: 1, senderId: 1, text: "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤—ã –∫ —Å—ä—ë–º–∫–∞–º?", timestamp: new Date(Date.now() - 30 * 60000).toISOString(), status: "read" },
                { id: 2, senderId: 2, text: "–î–∞, —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ! –ì–¥–µ —Ä–µ–∫–≤–∏–∑–∏—Ç?", timestamp: new Date(Date.now() - 25 * 60000).toISOString(), status: "read" },
                { id: 3, senderId: 1, text: "–í –≥—Ä–∏–º—ë—Ä–∫–µ, –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª. –ú–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —á—Ç–æ –Ω—É–∂–Ω–æ üòä", timestamp: new Date(Date.now() - 20 * 60000).toISOString(), status: "read" }
            ],
            appearance: {
                theme: "telegram",
                showTimestamps: true,
                showStatus: true
            }
        },
        {
            id: 2,
            name: "–ê–Ω–Ω–∞ –∏ –ë–æ—Ä–∏—Å",
            participants: [
                { id: 1, name: "–ê–Ω–Ω–∞", status: "online", avatar: null },
                { id: 2, name: "–ë–æ—Ä–∏—Å", status: "–±—ã–ª 5 –º–∏–Ω –Ω–∞–∑–∞–¥", avatar: null, isCurrentUser: true }
            ],
            messages: [
                { id: 1, senderId: 1, text: "–ì–¥–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è?", timestamp: new Date(Date.now() - 45 * 60000).toISOString(), status: "read" }
            ],
            appearance: {
                theme: "telegram",
                showTimestamps: true,
                showStatus: true
            }
        }
    ],
    isAdminPanelOpen: false,
    activeAdminTab: "participants",
    typingUser: null
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
function getCurrentChat() {
    return state.chats.find(chat => chat.id === state.currentChatId);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
function getParticipantById(participantId) {
    const chat = getCurrentChat();
    return chat.participants.find(p => p.id === participantId);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(isoString) {
    const date = new Date(isoString);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(isoString) {
    const date = new Date(isoString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
        return "–°–µ–≥–æ–¥–Ω—è";
    } else if (date.toDateString() === yesterday.toDateString()) {
        return "–í—á–µ—Ä–∞";
    } else {
        return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' });
    }
}

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º
function groupMessagesByDate(messages) {
    const grouped = {};
    messages.forEach(message => {
        const date = new Date(message.timestamp).toDateString();
        if (!grouped[date]) {
            grouped[date] = [];
        }
        grouped[date].push(message);
    });
    return grouped;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function closeAdminPanel() {
    const adminPanel = document.getElementById('admin-panel');
    adminPanel.classList.remove('visible');
    setTimeout(() => {
        adminPanel.classList.add('hidden');
        state.isAdminPanelOpen = false;
    }, 300);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function openAdminPanel() {
    const adminPanel = document.getElementById('admin-panel');
    adminPanel.classList.remove('hidden');
    setTimeout(() => {
        adminPanel.classList.add('visible');
        state.isAdminPanelOpen = true;
    }, 10);
    populateAdminPanel();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function switchAdminTab(tabId) {
    state.activeAdminTab = tabId;

    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.add('hidden');
    });

    document.getElementById(`${tabId}-tab`).classList.remove('hidden');

    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`.tab[data-tab="${tabId}"]`).classList.add('active');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadData() {
    try {
        const savedData = localStorage.getItem(CONFIG.storageKey);
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            state.chats = parsedData.chats || state.chats;
            state.currentChatId = parsedData.currentChatId || state.currentChatId;
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveData() {
    try {
        const dataToSave = {
            chats: state.chats,
            currentChatId: state.currentChatId
        };
        localStorage.setItem(CONFIG.storageKey, JSON.stringify(dataToSave));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
function renderChatList() {
    const chatList = document.getElementById('chat-list');
    chatList.innerHTML = '';

    state.chats.forEach(chat => {
        const lastMessage = chat.messages.length > 0
            ? chat.messages[chat.messages.length - 1].text
            : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';

        const isActive = chat.id === state.currentChatId;

        const chatItem = document.createElement('div');
        chatItem.className = `chat-item ${isActive ? 'active' : ''}`;
        chatItem.dataset.chatId = chat.id;
        chatItem.innerHTML = `
            <div class="avatar-placeholder"></div>
            <div class="chat-info">
                <div class="chat-name">${chat.name}</div>
                <div class="last-message">${lastMessage}</div>
            </div>
        `;

        chatItem.addEventListener('click', () => switchChat(chat.id));
        chatList.appendChild(chatItem);
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
function switchChat(chatId) {
    state.currentChatId = chatId;
    saveData();
    renderChatList();
    renderMessages();
    updateChatHeader();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–ø–∫–∏ —á–∞—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å)
function updateChatHeader() {
    const chat = getCurrentChat();
    document.getElementById('chat-name').textContent = chat.name;

    // –°—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const otherParticipant = chat.participants.find(p => !p.isCurrentUser);
    if (otherParticipant) {
        document.getElementById('chat-status').textContent = otherParticipant.status;
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
function renderMessages() {
    const messagesContainer = document.getElementById('messages');
    messagesContainer.innerHTML = '';

    const chat = getCurrentChat();
    const groupedMessages = groupMessagesByDate(chat.messages);

    Object.keys(groupedMessages).forEach(date => {
        const dateHeader = document.createElement('div');
        dateHeader.className = 'message-date';
        dateHeader.textContent = formatDate(groupedMessages[date][0].timestamp);
        messagesContainer.appendChild(dateHeader);

        groupedMessages[date].forEach(message => {
            const sender = getParticipantById(message.senderId);
            const isCurrentUser = sender.isCurrentUser;

            const messageElement = document.createElement('div');
            messageElement.className = `message ${isCurrentUser ? 'outgoing' : 'incoming'}`;

            messageElement.innerHTML = `
                <div class="bubble">${message.text}</div>
                <div class="meta">
                    <span class="time">${formatTime(message.timestamp)}</span>
                    <span class="status">${isCurrentUser ? '‚úì‚úì' : ''}</span>
                </div>
            `;

            messagesContainer.appendChild(messageElement);
        });
    });

    scrollToBottom();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function sendMessageFromUI() {
    const input = document.getElementById('message-input');
    const text = input.value.trim();

    if (!text) return;

    addMessage(CONFIG.currentUserId, text);
    input.value = '';
    input.focus();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function sendMessageFromAdmin() {
    const senderSelect = document.getElementById('msg-sender');
    const textInput = document.getElementById('msg-text');

    const senderId = parseInt(senderSelect.value);
    const text = textInput.value.trim();

    if (!text) return;

    addMessage(senderId, text);
    textInput.value = '';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
function addMessage(senderId, text) {
    const chat = getCurrentChat();

    const newMessage = {
        id: Date.now(),
        senderId,
        text,
        timestamp: new Date().toISOString(),
        status: "sent"
    };

    chat.messages.push(newMessage);
    saveData();
    renderMessages();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const otherParticipant = chat.participants.find(p => p.id !== senderId);
    if (otherParticipant) {
        showTypingIndicator(otherParticipant.name);
        setTimeout(hideTypingIndicator, 2000);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ (–∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
function addParticipant() {
    const name = prompt('–ò–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', '–£—á–∞—Å—Ç–Ω–∏–∫');
    if (!name) return;

    const chat = getCurrentChat();
    const newId = Math.max(...chat.participants.map(p => p.id), 0) + 1;

    chat.participants.push({
        id: newId,
        name,
        status: "online",
        avatar: null
    });

    saveData();
    populateAdminPanel();
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
function populateAdminPanel() {
    const chat = getCurrentChat();

    // –£—á–∞—Å—Ç–Ω–∏–∫–∏
    const participantsContainer = document.getElementById('participants');
    participantsContainer.innerHTML = '';

    chat.participants.forEach(participant => {
        const participantEl = document.createElement('div');
        participantEl.className = 'participant';

        participantEl.innerHTML = `
            <div class="avatar-placeholder"></div>
            <div class="participant-info">
                <span class="name">${participant.name}</span>
                <span class="status">${participant.status}</span>
            </div>
            <button class="edit-btn">‚úèÔ∏è</button>
        `;

        participantsContainer.appendChild(participantEl);
    });

    // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const senderSelect = document.getElementById('msg-sender');
    senderSelect.innerHTML = '';

    chat.participants.forEach(participant => {
        const option = document.createElement('option');
        option.value = participant.id;
        option.textContent = participant.name;
        senderSelect.appendChild(option);
    });

    // –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    document.getElementById('chat-name-input').value = chat.name;

    // –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.theme-option').forEach(option => {
        option.classList.remove('active');
        if (option.dataset.theme === chat.appearance.theme) {
            option.classList.add('active');
        }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    document.getElementById('show-timestamps').checked = chat.appearance.showTimestamps;
    document.getElementById('show-status').checked = chat.appearance.showStatus;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
function changeTheme(theme) {
    const chat = getCurrentChat();
    chat.appearance.theme = theme;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã —Ç–µ–º—ã
    document.getElementById('sidebar').className = theme + '-theme';
    document.getElementById('chat-container').className = theme + '-theme';

    saveData();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function saveSettings() {
    const chat = getCurrentChat();

    // –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    chat.name = document.getElementById('chat-name-input').value;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    chat.appearance.showTimestamps = document.getElementById('show-timestamps').checked;
    chat.appearance.showStatus = document.getElementById('show-status').checked;

    saveData();
    updateChatHeader();
    renderChatList();
}

// –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
function clearChat() {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É?")) {
        const chat = getCurrentChat();
        chat.messages = [];
        saveData();
        renderMessages();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –≤ JSON
function exportChat() {
    const chat = getCurrentChat();
    const dataStr = JSON.stringify(chat, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);

    const exportFileDefaultName = `—á–∞—Ç_${chat.name}_${new Date().toISOString().slice(0, 10)}.json`;

    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
}

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
function showTypingIndicator(userName) {
    const indicator = document.getElementById('typing-indicator');
    document.getElementById('typing-user').textContent = userName;
    indicator.classList.remove('hidden');
    setTimeout(() => indicator.classList.add('visible'), 10);
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    indicator.classList.remove('visible');
    setTimeout(() => indicator.classList.add('hidden'), 300);
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤–Ω–∏–∑
function scrollToBottom() {
    const messages = document.getElementById('messages');
    messages.scrollTo({
        top: messages.scrollHeight,
        behavior: 'smooth'
    });
}

// --- –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ state –∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
function addNewChat(name) {
    if (!name.trim()) {
        alert('–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }

    const newId = state.chats.length > 0
        ? Math.max(...state.chats.map(c => c.id)) + 1
        : 1;

    const newChat = {
        id: newId,
        name: name.trim(),
        participants: [
            { id: CONFIG.currentUserId, name: "–ë–æ—Ä–∏—Å", status: "online", avatar: null, isCurrentUser: true }
        ],
        messages: [],
        appearance: {
            theme: "telegram",
            showTimestamps: true,
            showStatus: true
        }
    };

    state.chats.push(newChat);

    // –î–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç –∞–∫—Ç–∏–≤–Ω—ã–º - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –Ω–µ–≥–æ —Å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–æ–π
    switchChat(newId);
}

// --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ ---

function setupNewChatModal() {
    const newChatButton = document.getElementById('new-chat');
    const modal = document.getElementById('new-chat-modal');
    const chatNameInputModal = document.getElementById('chat-name-input-modal');
    const chatMessageInputModal = document.getElementById('chat-message-input-modal');
    const addChatConfirm = document.getElementById('add-chat-confirm');
    const addChatCancel = document.getElementById('add-chat-cancel');

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "+"
    newChatButton.addEventListener('click', () => {
        chatNameInputModal.value = '';
        chatMessageInputModal.value = '';
        modal.classList.remove('hidden');
        chatNameInputModal.focus();
    });

    // –û—Ç–º–µ–Ω–∞ - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
    addChatCancel.addEventListener('click', () => {
        modal.classList.add('hidden');
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    addChatConfirm.addEventListener('click', () => {
        const name = chatNameInputModal.value.trim();

        if (!name) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞');
            chatNameInputModal.focus();
            return;
        }

        addNewChat(name);

        modal.classList.add('hidden');
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–∞–π–¥–±–∞—Ä–∞
    document.getElementById('back-button').addEventListener('click', () => {
        document.getElementById('sidebar').classList.toggle('visible');
    });

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    document.getElementById('admin-toggle').addEventListener('click', openAdminPanel);
    document.getElementById('close-admin').addEventListener('click', closeAdminPanel);

    // –í–∫–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => switchAdminTab(tab.dataset.tab));
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    document.getElementById('send-msg').addEventListener('click', sendMessageFromAdmin);
    document.getElementById('send-btn').addEventListener('click', sendMessageFromUI);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    document.getElementById('message-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessageFromUI();
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
    document.getElementById('msg-text').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessageFromAdmin();
        }
    });

    // –£—á–∞—Å—Ç–Ω–∏–∫–∏
    document.getElementById('add-participant').addEventListener('click', addParticipant);

    // –í—ã–±–æ—Ä —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.theme-option').forEach(option => {
        option.addEventListener('click', () => changeTheme(option.dataset.theme));
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('save-settings').addEventListener('click', saveSettings);
    document.getElementById('clear-chat').addEventListener('click', clearChat);
    document.getElementById('export-chat').addEventListener('click', exportChat);

    // –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('msg-time').addEventListener('change', function () {
        document.getElementById('custom-time').classList.toggle('hidden', this.value !== 'custom');
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    loadData();
    setupEventListeners();
    setupNewChatModal();

    renderChatList();
    renderMessages();
    populateAdminPanel();
    updateChatHeader();
    switchAdminTab(state.activeAdminTab);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    const chat = getCurrentChat();
    changeTheme(chat.appearance.theme);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
window.addEventListener('DOMContentLoaded', initApp);
